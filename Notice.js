// Generated by CoffeeScript 1.4.0

/*
@param	context	<anything wrappable in $()>
@param	options	{
	display_policy: <'header' or 'target'>,
	special_field_handlers: {<target_identifier>: <fn>, ...}
	default_type: <name of default notice type>
*/


(function() {

  this.Notice = function(context, options) {
    var _this = this;
    this.context = $(context);
    options = options || {};
    this.display_policy = options.display_policy || 'header';
    this.special_field_handlers = options.special_field_handlers;
    this.default_type = 'error';
    this.find_notice_header = function(context) {
      var notice_header, notice_header_pointer, selecter;
      _this.context = context || _this.context;
      notice_header = $('.notice_header', context);
      if (!notice_header.size()) {
        notice_header_pointer = $('.notice_header_pointer', context);
        if (notice_header_pointer.size()) {
          selecter = notice_header_pointer.attr('data-target_element');
          notice_header = $(selecter);
        } else {
          notice_header = $('.notice_header');
        }
        if (!notice_header.size()) {
          notice_header = _this.context;
        }
      }
      return notice_header;
    };
    this.notice_header = this.find_notice_header();
    if (!this.notice_header.size()) {
      throw new Exception('No notice header found');
    }
    this.resolve_target = function(target) {
      var element;
      if (target.match(/^[a-z0-9_\-.\[\]]+$/i)) {
        element = $('[name="' + target + '"]');
        if (element.size()) {
          return element;
        }
      }
      return $(target);
    };
    this.find_highlight_target = function(target) {
      var highlight_target, selecter;
      selecter = target.attr('data-highlight_target_element');
      if (selecter) {
        return $(selecter);
      } else {
        highlight_target = target.parents('.highlightable:first');
        if (highlight_target.size()) {
          return highlight_target;
        }
        return target;
      }
    };
    this.highlight = function(notice) {
      var element, highlight_class, target, _ref, _results;
      highlight_class = _this.make_highlight_class(notice);
      _ref = notice.highlight_elements;
      _results = [];
      for (target in _ref) {
        element = _ref[target];
        _results.push(element.addClass(highlight_class));
      }
      return _results;
    };
    this.unhighlight = function(notice) {
      var element, highlight_class, target, _ref, _results;
      highlight_class = _this.make_highlight_class(notice);
      _ref = notice.highlight_elements;
      _results = [];
      for (target in _ref) {
        element = _ref[target];
        _results.push(element.removeClass(highlight_class));
      }
      return _results;
    };
    this.make_highlight_class = function(notice) {
      return notice.type + '_highlighted';
    };
    this.target_reference_display_names = {};
    this.target_display_name = function(target, target_element) {
      var container, display_name;
      display_name = _this.target_reference_display_names[target];
      if (display_name) {
        return display_name;
      }
      display_name = target_element.attr('data-display_name');
      if (!display_name) {
        container = target_element.parents('.target_container:first');
        if (container.size()) {
          display_name = $('.display_name', container).text();
        }
        if (!display_name) {
          display_name = target_element.attr('name');
          if (!display_name) {
            display_name = target;
          }
        }
      }
      _this.target_reference_display_names[target] = display_name;
      return display_name;
    };
    this.make_notice_text = function(notice) {
      var display_name, display_names, message, pattern, target, target_element, targets_reference, _ref;
      message = notice.message;
      if (notice.targets) {
        display_names = [];
        _ref = notice.target_elements;
        for (target in _ref) {
          target_element = _ref[target];
          display_name = _this.target_display_name(target, target_element);
          display_names.push(display_name);
          pattern = new RegExp('\{\{' + RegExp.quote(target) + '\}\}', 'g');
          message = message.replace(pattern, display_name);
        }
        targets_reference = display_names.join(', ');
        message = message.replace(/\{\{targets\}\}/g, targets_reference);
      }
      return message;
    };
    this.make_notice_element = function(notice) {
      var message;
      message = _this.make_notice_text(notice);
      return $('<div class="notice ' + _this.make_notice_class(notice) + '">').text(message);
    };
    this.make_notice_class = function(notice) {
      return notice.type + '_notice';
    };
    this.notices = [];
    this.add = function(notice) {
      var highlight_element, target, target_element, v, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (Array.isArray(notice)) {
        _results = [];
        for (_i = 0, _len = notice.length; _i < _len; _i++) {
          v = notice[_i];
          _results.push(_this.add(v));
        }
        return _results;
      } else if (typeof notice === typeof {}) {
        notice = _.cloneDeep(notice);
        _this.notices.push(notice);
        notice.type = notice.type || _this.default_type;
        notice.display_policy = notice.display_policy || _this.display_policy;
        if (notice.targets) {
          if (!Array.isArray(notice.targets)) {
            notice.targets = [notice.targets];
          }
          notice.target_elements = {};
          _ref = notice.targets;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            target = _ref[_j];
            notice.target_elements[target] = _this.resolve_target(target);
          }
          notice.highlight_elements = {};
          _ref1 = notice.target_elements;
          for (target in _ref1) {
            target_element = _ref1[target];
            highlight_element = _this.find_highlight_target(target_element);
            notice.highlight_elements[target] = highlight_element;
          }
          _this.highlight(notice);
        }
        notice.element = _this.make_notice_element(notice);
        if (notice.display_policy === 'header') {
          return _this.add_to_header(notice);
        } else {
          return _this.add_to_target(notice);
        }
      } else if (typeof notice === typeof '') {
        return _this.add({
          message: notice
        });
      }
    };
    this.add_to_header = function(notice) {
      return _this.notice_header.append(notice.element);
    };
    this.add_to_target = function(notice) {
      var target, _i, _len, _ref, _results;
      if (notice.targets) {
        _ref = notice.targets;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          target = _ref[_i];
          _results.push(notice.target_elements[target].after(notice.element));
        }
        return _results;
      } else {
        return _this.add_to_header(notice);
      }
    };
    this.remove = function(offset) {
      var notice;
      notice = _this.notices[offset];
      _this.unhighlight(notice);
      notice.element.remove();
      return delete _this.notices[offset];
    };
    this.clear = function(targets) {
      var i, notice, target, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      if (!targets) {
        _ref = _this.notices;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          notice = _ref[i];
          _this.remove(i);
        }
      } else {
        if (typeof targets !== typeof []) {
          targets = [targets];
        }
        for (_j = 0, _len1 = targets.length; _j < _len1; _j++) {
          target = targets[_j];
          _ref1 = _this.notices;
          for (i = _k = 0, _len2 = _ref1.length; _k < _len2; i = ++_k) {
            notice = _ref1[i];
            if (notice.targets && notice.targets.indexOf(target) !== -1) {
              _this.remove(i);
            }
          }
        }
      }
      return _this.notices = _.compact(_this.notices);
    };
    this.clear_type = function(type) {
      var i, notice, _i, _len, _ref, _results;
      _ref = _this.notices;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        notice = _ref[i];
        if (notice.type === type) {
          _results.push(_this.remove(i));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    return this;
  };

  if (this.$) {
    $.fn.notice = function(options) {
      return new Notice(this, options);
    };
  }

}).call(this);
